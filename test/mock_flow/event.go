// Code generated by MockGen. DO NOT EDIT.
// Source: flow/event.go

// Package mock_flow is a generated GoMock package.
package mock_flow

import (
	model "github.com/denismitr/auditbase/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockReceivedEvent is a mock of ReceivedEvent interface
type MockReceivedEvent struct {
	ctrl     *gomock.Controller
	recorder *MockReceivedEventMockRecorder
}

// MockReceivedEventMockRecorder is the mock recorder for MockReceivedEvent
type MockReceivedEventMockRecorder struct {
	mock *MockReceivedEvent
}

// NewMockReceivedEvent creates a new mock instance
func NewMockReceivedEvent(ctrl *gomock.Controller) *MockReceivedEvent {
	mock := &MockReceivedEvent{ctrl: ctrl}
	mock.recorder = &MockReceivedEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReceivedEvent) EXPECT() *MockReceivedEventMockRecorder {
	return m.recorder
}

// Event mocks base method
func (m *MockReceivedEvent) Event() (model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Event")
	ret0, _ := ret[0].(model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Event indicates an expected call of Event
func (mr *MockReceivedEventMockRecorder) Event() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MockReceivedEvent)(nil).Event))
}

// Ack mocks base method
func (m *MockReceivedEvent) Ack() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack
func (mr *MockReceivedEventMockRecorder) Ack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockReceivedEvent)(nil).Ack))
}

// Reject mocks base method
func (m *MockReceivedEvent) Reject() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reject")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reject indicates an expected call of Reject
func (mr *MockReceivedEventMockRecorder) Reject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reject", reflect.TypeOf((*MockReceivedEvent)(nil).Reject))
}

// Postpone mocks base method
func (m *MockReceivedEvent) Postpone() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Postpone")
	ret0, _ := ret[0].(error)
	return ret0
}

// Postpone indicates an expected call of Postpone
func (mr *MockReceivedEventMockRecorder) Postpone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Postpone", reflect.TypeOf((*MockReceivedEvent)(nil).Postpone))
}
