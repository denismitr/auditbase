// Code generated by MockGen. DO NOT EDIT.
// Source: model/types.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	model "github.com/denismitr/auditbase/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTargetTypeRepository is a mock of TargetTypeRepository interface
type MockTargetTypeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTargetTypeRepositoryMockRecorder
}

// MockTargetTypeRepositoryMockRecorder is the mock recorder for MockTargetTypeRepository
type MockTargetTypeRepositoryMockRecorder struct {
	mock *MockTargetTypeRepository
}

// NewMockTargetTypeRepository creates a new mock instance
func NewMockTargetTypeRepository(ctrl *gomock.Controller) *MockTargetTypeRepository {
	mock := &MockTargetTypeRepository{ctrl: ctrl}
	mock.recorder = &MockTargetTypeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTargetTypeRepository) EXPECT() *MockTargetTypeRepositoryMockRecorder {
	return m.recorder
}

// Select mocks base method
func (m *MockTargetTypeRepository) Select() ([]model.TargetType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select")
	ret0, _ := ret[0].([]model.TargetType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select
func (mr *MockTargetTypeRepositoryMockRecorder) Select() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockTargetTypeRepository)(nil).Select))
}

// Create mocks base method
func (m *MockTargetTypeRepository) Create(arg0 model.TargetType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockTargetTypeRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTargetTypeRepository)(nil).Create), arg0)
}

// FirstByName mocks base method
func (m *MockTargetTypeRepository) FirstByName(arg0 string) (model.TargetType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstByName", arg0)
	ret0, _ := ret[0].(model.TargetType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstByName indicates an expected call of FirstByName
func (mr *MockTargetTypeRepositoryMockRecorder) FirstByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstByName", reflect.TypeOf((*MockTargetTypeRepository)(nil).FirstByName), arg0)
}

// FirstByID mocks base method
func (m *MockTargetTypeRepository) FirstByID(arg0 string) (model.TargetType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstByID", arg0)
	ret0, _ := ret[0].(model.TargetType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstByID indicates an expected call of FirstByID
func (mr *MockTargetTypeRepositoryMockRecorder) FirstByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstByID", reflect.TypeOf((*MockTargetTypeRepository)(nil).FirstByID), arg0)
}

// FirstOrCreateByName mocks base method
func (m *MockTargetTypeRepository) FirstOrCreateByName(arg0 string) (model.TargetType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstOrCreateByName", arg0)
	ret0, _ := ret[0].(model.TargetType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstOrCreateByName indicates an expected call of FirstOrCreateByName
func (mr *MockTargetTypeRepositoryMockRecorder) FirstOrCreateByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrCreateByName", reflect.TypeOf((*MockTargetTypeRepository)(nil).FirstOrCreateByName), arg0)
}

// MockActorTypeRepository is a mock of ActorTypeRepository interface
type MockActorTypeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockActorTypeRepositoryMockRecorder
}

// MockActorTypeRepositoryMockRecorder is the mock recorder for MockActorTypeRepository
type MockActorTypeRepositoryMockRecorder struct {
	mock *MockActorTypeRepository
}

// NewMockActorTypeRepository creates a new mock instance
func NewMockActorTypeRepository(ctrl *gomock.Controller) *MockActorTypeRepository {
	mock := &MockActorTypeRepository{ctrl: ctrl}
	mock.recorder = &MockActorTypeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActorTypeRepository) EXPECT() *MockActorTypeRepositoryMockRecorder {
	return m.recorder
}

// Select mocks base method
func (m *MockActorTypeRepository) Select() ([]model.ActorType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select")
	ret0, _ := ret[0].([]model.ActorType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select
func (mr *MockActorTypeRepositoryMockRecorder) Select() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockActorTypeRepository)(nil).Select))
}

// Create mocks base method
func (m *MockActorTypeRepository) Create(arg0 model.ActorType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockActorTypeRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockActorTypeRepository)(nil).Create), arg0)
}

// FirstByName mocks base method
func (m *MockActorTypeRepository) FirstByName(arg0 string) (model.ActorType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstByName", arg0)
	ret0, _ := ret[0].(model.ActorType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstByName indicates an expected call of FirstByName
func (mr *MockActorTypeRepositoryMockRecorder) FirstByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstByName", reflect.TypeOf((*MockActorTypeRepository)(nil).FirstByName), arg0)
}

// FirstByID mocks base method
func (m *MockActorTypeRepository) FirstByID(arg0 string) (model.ActorType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstByID", arg0)
	ret0, _ := ret[0].(model.ActorType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstByID indicates an expected call of FirstByID
func (mr *MockActorTypeRepositoryMockRecorder) FirstByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstByID", reflect.TypeOf((*MockActorTypeRepository)(nil).FirstByID), arg0)
}

// FirstOrCreateByName mocks base method
func (m *MockActorTypeRepository) FirstOrCreateByName(arg0 string) (model.ActorType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstOrCreateByName", arg0)
	ret0, _ := ret[0].(model.ActorType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstOrCreateByName indicates an expected call of FirstOrCreateByName
func (mr *MockActorTypeRepositoryMockRecorder) FirstOrCreateByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrCreateByName", reflect.TypeOf((*MockActorTypeRepository)(nil).FirstOrCreateByName), arg0)
}
