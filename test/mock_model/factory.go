// Code generated by MockGen. DO NOT EDIT.
// Source: model/factory.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	model "github.com/denismitr/auditbase/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepositoryFactory is a mock of RepositoryFactory interface
type MockRepositoryFactory struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryFactoryMockRecorder
}

// MockRepositoryFactoryMockRecorder is the mock recorder for MockRepositoryFactory
type MockRepositoryFactoryMockRecorder struct {
	mock *MockRepositoryFactory
}

// NewMockRepositoryFactory creates a new mock instance
func NewMockRepositoryFactory(ctrl *gomock.Controller) *MockRepositoryFactory {
	mock := &MockRepositoryFactory{ctrl: ctrl}
	mock.recorder = &MockRepositoryFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoryFactory) EXPECT() *MockRepositoryFactoryMockRecorder {
	return m.recorder
}

// Properties mocks base method
func (m *MockRepositoryFactory) Properties() model.PropertyRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Properties")
	ret0, _ := ret[0].(model.PropertyRepository)
	return ret0
}

// Properties indicates an expected call of Properties
func (mr *MockRepositoryFactoryMockRecorder) Properties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Properties", reflect.TypeOf((*MockRepositoryFactory)(nil).Properties))
}

// Events mocks base method
func (m *MockRepositoryFactory) Events() model.EventRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events")
	ret0, _ := ret[0].(model.EventRepository)
	return ret0
}

// Events indicates an expected call of Events
func (mr *MockRepositoryFactoryMockRecorder) Events() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockRepositoryFactory)(nil).Events))
}

// Entities mocks base method
func (m *MockRepositoryFactory) Entities() model.EntityRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Entities")
	ret0, _ := ret[0].(model.EntityRepository)
	return ret0
}

// Entities indicates an expected call of Entities
func (mr *MockRepositoryFactoryMockRecorder) Entities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entities", reflect.TypeOf((*MockRepositoryFactory)(nil).Entities))
}

// Microservices mocks base method
func (m *MockRepositoryFactory) Microservices() model.MicroserviceRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Microservices")
	ret0, _ := ret[0].(model.MicroserviceRepository)
	return ret0
}

// Microservices indicates an expected call of Microservices
func (mr *MockRepositoryFactoryMockRecorder) Microservices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Microservices", reflect.TypeOf((*MockRepositoryFactory)(nil).Microservices))
}
