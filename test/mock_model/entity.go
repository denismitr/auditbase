// Code generated by MockGen. DO NOT EDIT.
// Source: model/entity.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	model "github.com/denismitr/auditbase/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEntityRepository is a mock of EntityRepository interface
type MockEntityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEntityRepositoryMockRecorder
}

// MockEntityRepositoryMockRecorder is the mock recorder for MockEntityRepository
type MockEntityRepositoryMockRecorder struct {
	mock *MockEntityRepository
}

// NewMockEntityRepository creates a new mock instance
func NewMockEntityRepository(ctrl *gomock.Controller) *MockEntityRepository {
	mock := &MockEntityRepository{ctrl: ctrl}
	mock.recorder = &MockEntityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEntityRepository) EXPECT() *MockEntityRepositoryMockRecorder {
	return m.recorder
}

// Select mocks base method
func (m *MockEntityRepository) Select(arg0 *model.Filter, arg1 *model.Sort, arg2 *model.Pagination) ([]*model.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select
func (mr *MockEntityRepositoryMockRecorder) Select(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockEntityRepository)(nil).Select), arg0, arg1, arg2)
}

// Create mocks base method
func (m *MockEntityRepository) Create(arg0 *model.Entity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockEntityRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEntityRepository)(nil).Create), arg0)
}

// FirstByNameAndService mocks base method
func (m *MockEntityRepository) FirstByNameAndService(arg0 string, arg1 *model.Microservice) (*model.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstByNameAndService", arg0, arg1)
	ret0, _ := ret[0].(*model.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstByNameAndService indicates an expected call of FirstByNameAndService
func (mr *MockEntityRepositoryMockRecorder) FirstByNameAndService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstByNameAndService", reflect.TypeOf((*MockEntityRepository)(nil).FirstByNameAndService), arg0, arg1)
}

// FirstByID mocks base method
func (m *MockEntityRepository) FirstByID(arg0 string) (*model.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstByID", arg0)
	ret0, _ := ret[0].(*model.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstByID indicates an expected call of FirstByID
func (mr *MockEntityRepositoryMockRecorder) FirstByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstByID", reflect.TypeOf((*MockEntityRepository)(nil).FirstByID), arg0)
}

// Properties mocks base method
func (m *MockEntityRepository) Properties(ID string) ([]*model.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Properties", ID)
	ret0, _ := ret[0].([]*model.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Properties indicates an expected call of Properties
func (mr *MockEntityRepositoryMockRecorder) Properties(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Properties", reflect.TypeOf((*MockEntityRepository)(nil).Properties), ID)
}

// FirstOrCreateByNameAndService mocks base method
func (m *MockEntityRepository) FirstOrCreateByNameAndService(arg0 string, arg1 *model.Microservice) (*model.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstOrCreateByNameAndService", arg0, arg1)
	ret0, _ := ret[0].(*model.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstOrCreateByNameAndService indicates an expected call of FirstOrCreateByNameAndService
func (mr *MockEntityRepositoryMockRecorder) FirstOrCreateByNameAndService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrCreateByNameAndService", reflect.TypeOf((*MockEntityRepository)(nil).FirstOrCreateByNameAndService), arg0, arg1)
}
