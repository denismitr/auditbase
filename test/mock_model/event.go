// Code generated by MockGen. DO NOT EDIT.
// Source: model/event.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	context "context"
	model "github.com/denismitr/auditbase/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEventRepository is a mock of EventRepository interface
type MockEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryMockRecorder
}

// MockEventRepositoryMockRecorder is the mock recorder for MockEventRepository
type MockEventRepositoryMockRecorder struct {
	mock *MockEventRepository
}

// NewMockEventRepository creates a new mock instance
func NewMockEventRepository(ctrl *gomock.Controller) *MockEventRepository {
	mock := &MockEventRepository{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventRepository) EXPECT() *MockEventRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockEventRepository) Create(arg0 context.Context, arg1 *model.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockEventRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEventRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockEventRepository) Delete(arg0 model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockEventRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEventRepository)(nil).Delete), arg0)
}

// Count mocks base method
func (m *MockEventRepository) Count() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockEventRepositoryMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockEventRepository)(nil).Count))
}

// FindOneByID mocks base method
func (m *MockEventRepository) FindOneByID(arg0 model.ID) (*model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByID", arg0)
	ret0, _ := ret[0].(*model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByID indicates an expected call of FindOneByID
func (mr *MockEventRepositoryMockRecorder) FindOneByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByID", reflect.TypeOf((*MockEventRepository)(nil).FindOneByID), arg0)
}

// Select mocks base method
func (m *MockEventRepository) Select(arg0 *model.Filter, arg1 *model.Sort, arg2 *model.Pagination) ([]*model.Event, *model.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.Event)
	ret1, _ := ret[1].(*model.Meta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Select indicates an expected call of Select
func (mr *MockEventRepositoryMockRecorder) Select(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockEventRepository)(nil).Select), arg0, arg1, arg2)
}

// MockEventPersister is a mock of EventPersister interface
type MockEventPersister struct {
	ctrl     *gomock.Controller
	recorder *MockEventPersisterMockRecorder
}

// MockEventPersisterMockRecorder is the mock recorder for MockEventPersister
type MockEventPersisterMockRecorder struct {
	mock *MockEventPersister
}

// NewMockEventPersister creates a new mock instance
func NewMockEventPersister(ctrl *gomock.Controller) *MockEventPersister {
	mock := &MockEventPersister{ctrl: ctrl}
	mock.recorder = &MockEventPersisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventPersister) EXPECT() *MockEventPersisterMockRecorder {
	return m.recorder
}

// Persist mocks base method
func (m *MockEventPersister) Persist(arg0 *model.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Persist", arg0)
}

// Persist indicates an expected call of Persist
func (mr *MockEventPersisterMockRecorder) Persist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockEventPersister)(nil).Persist), arg0)
}

// Run mocks base method
func (m *MockEventPersister) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockEventPersisterMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockEventPersister)(nil).Run), ctx)
}

// NotifyOnResult mocks base method
func (m *MockEventPersister) NotifyOnResult(arg0 chan<- model.EventPersistenceResult) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyOnResult", arg0)
}

// NotifyOnResult indicates an expected call of NotifyOnResult
func (mr *MockEventPersisterMockRecorder) NotifyOnResult(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyOnResult", reflect.TypeOf((*MockEventPersister)(nil).NotifyOnResult), arg0)
}

// MockEventPersistenceResult is a mock of EventPersistenceResult interface
type MockEventPersistenceResult struct {
	ctrl     *gomock.Controller
	recorder *MockEventPersistenceResultMockRecorder
}

// MockEventPersistenceResultMockRecorder is the mock recorder for MockEventPersistenceResult
type MockEventPersistenceResultMockRecorder struct {
	mock *MockEventPersistenceResult
}

// NewMockEventPersistenceResult creates a new mock instance
func NewMockEventPersistenceResult(ctrl *gomock.Controller) *MockEventPersistenceResult {
	mock := &MockEventPersistenceResult{ctrl: ctrl}
	mock.recorder = &MockEventPersistenceResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventPersistenceResult) EXPECT() *MockEventPersistenceResultMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockEventPersistenceResult) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockEventPersistenceResultMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockEventPersistenceResult)(nil).ID))
}

// Err mocks base method
func (m *MockEventPersistenceResult) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockEventPersistenceResultMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockEventPersistenceResult)(nil).Err))
}

// Ok mocks base method
func (m *MockEventPersistenceResult) Ok() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ok")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ok indicates an expected call of Ok
func (mr *MockEventPersistenceResultMockRecorder) Ok() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ok", reflect.TypeOf((*MockEventPersistenceResult)(nil).Ok))
}
