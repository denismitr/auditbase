// Code generated by MockGen. DO NOT EDIT.
// Source: model/property.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	model "github.com/denismitr/auditbase/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPropertyRepository is a mock of PropertyRepository interface
type MockPropertyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyRepositoryMockRecorder
}

// MockPropertyRepositoryMockRecorder is the mock recorder for MockPropertyRepository
type MockPropertyRepositoryMockRecorder struct {
	mock *MockPropertyRepository
}

// NewMockPropertyRepository creates a new mock instance
func NewMockPropertyRepository(ctrl *gomock.Controller) *MockPropertyRepository {
	mock := &MockPropertyRepository{ctrl: ctrl}
	mock.recorder = &MockPropertyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPropertyRepository) EXPECT() *MockPropertyRepositoryMockRecorder {
	return m.recorder
}

// GetIDOrCreate mocks base method
func (m *MockPropertyRepository) GetIDOrCreate(name, entityID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDOrCreate", name, entityID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDOrCreate indicates an expected call of GetIDOrCreate
func (mr *MockPropertyRepositoryMockRecorder) GetIDOrCreate(name, entityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDOrCreate", reflect.TypeOf((*MockPropertyRepository)(nil).GetIDOrCreate), name, entityID)
}

// FirstByID mocks base method
func (m *MockPropertyRepository) FirstByID(ID string) (*model.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstByID", ID)
	ret0, _ := ret[0].(*model.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstByID indicates an expected call of FirstByID
func (mr *MockPropertyRepositoryMockRecorder) FirstByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstByID", reflect.TypeOf((*MockPropertyRepository)(nil).FirstByID), ID)
}

// Select mocks base method
func (m *MockPropertyRepository) Select(arg0 *model.Filter, arg1 *model.Sort, arg2 *model.Pagination) ([]*model.Property, *model.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.Property)
	ret1, _ := ret[1].(*model.Meta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Select indicates an expected call of Select
func (mr *MockPropertyRepositoryMockRecorder) Select(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockPropertyRepository)(nil).Select), arg0, arg1, arg2)
}
