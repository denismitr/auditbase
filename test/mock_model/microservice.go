// Code generated by MockGen. DO NOT EDIT.
// Source: model/microservice.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	context "context"
	model "github.com/denismitr/auditbase/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMicroserviceRepository is a mock of MicroserviceRepository interface
type MockMicroserviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMicroserviceRepositoryMockRecorder
}

// MockMicroserviceRepositoryMockRecorder is the mock recorder for MockMicroserviceRepository
type MockMicroserviceRepositoryMockRecorder struct {
	mock *MockMicroserviceRepository
}

// NewMockMicroserviceRepository creates a new mock instance
func NewMockMicroserviceRepository(ctrl *gomock.Controller) *MockMicroserviceRepository {
	mock := &MockMicroserviceRepository{ctrl: ctrl}
	mock.recorder = &MockMicroserviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMicroserviceRepository) EXPECT() *MockMicroserviceRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMicroserviceRepository) Create(arg0 context.Context, arg1 *model.Microservice) (*model.Microservice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*model.Microservice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMicroserviceRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMicroserviceRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockMicroserviceRepository) Delete(arg0 model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockMicroserviceRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMicroserviceRepository)(nil).Delete), arg0)
}

// Update mocks base method
func (m *MockMicroserviceRepository) Update(arg0 model.ID, arg1 *model.Microservice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockMicroserviceRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMicroserviceRepository)(nil).Update), arg0, arg1)
}

// FirstByID mocks base method
func (m *MockMicroserviceRepository) FirstByID(ID model.ID) (*model.Microservice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstByID", ID)
	ret0, _ := ret[0].(*model.Microservice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstByID indicates an expected call of FirstByID
func (mr *MockMicroserviceRepositoryMockRecorder) FirstByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstByID", reflect.TypeOf((*MockMicroserviceRepository)(nil).FirstByID), ID)
}

// FirstByName mocks base method
func (m *MockMicroserviceRepository) FirstByName(ctx context.Context, name string) (*model.Microservice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstByName", ctx, name)
	ret0, _ := ret[0].(*model.Microservice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstByName indicates an expected call of FirstByName
func (mr *MockMicroserviceRepositoryMockRecorder) FirstByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstByName", reflect.TypeOf((*MockMicroserviceRepository)(nil).FirstByName), ctx, name)
}

// FirstOrCreateByName mocks base method
func (m *MockMicroserviceRepository) FirstOrCreateByName(ctx context.Context, name string) (*model.Microservice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstOrCreateByName", ctx, name)
	ret0, _ := ret[0].(*model.Microservice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstOrCreateByName indicates an expected call of FirstOrCreateByName
func (mr *MockMicroserviceRepositoryMockRecorder) FirstOrCreateByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrCreateByName", reflect.TypeOf((*MockMicroserviceRepository)(nil).FirstOrCreateByName), ctx, name)
}

// SelectAll mocks base method
func (m *MockMicroserviceRepository) SelectAll() ([]*model.Microservice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAll")
	ret0, _ := ret[0].([]*model.Microservice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAll indicates an expected call of SelectAll
func (mr *MockMicroserviceRepositoryMockRecorder) SelectAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAll", reflect.TypeOf((*MockMicroserviceRepository)(nil).SelectAll))
}
