// Code generated by MockGen. DO NOT EDIT.
// Source: model/change.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	model "github.com/denismitr/auditbase/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChangeRepository is a mock of ChangeRepository interface
type MockChangeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChangeRepositoryMockRecorder
}

// MockChangeRepositoryMockRecorder is the mock recorder for MockChangeRepository
type MockChangeRepositoryMockRecorder struct {
	mock *MockChangeRepository
}

// NewMockChangeRepository creates a new mock instance
func NewMockChangeRepository(ctrl *gomock.Controller) *MockChangeRepository {
	mock := &MockChangeRepository{ctrl: ctrl}
	mock.recorder = &MockChangeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChangeRepository) EXPECT() *MockChangeRepositoryMockRecorder {
	return m.recorder
}

// Select mocks base method
func (m *MockChangeRepository) Select(arg0 *model.Filter, arg1 *model.Sort, arg2 *model.Pagination) ([]*model.Change, *model.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.Change)
	ret1, _ := ret[1].(*model.Meta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Select indicates an expected call of Select
func (mr *MockChangeRepositoryMockRecorder) Select(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockChangeRepository)(nil).Select), arg0, arg1, arg2)
}

// FirstByID mocks base method
func (m *MockChangeRepository) FirstByID(arg0 string) (*model.Change, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstByID", arg0)
	ret0, _ := ret[0].(*model.Change)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstByID indicates an expected call of FirstByID
func (mr *MockChangeRepositoryMockRecorder) FirstByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstByID", reflect.TypeOf((*MockChangeRepository)(nil).FirstByID), arg0)
}
