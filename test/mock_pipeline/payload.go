// Code generated by MockGen. DO NOT EDIT.
// Source: pipeline/payload.go

// Package mock_pipeline is a generated GoMock package.
package mock_pipeline

import (
	model "github.com/denismitr/auditbase/model"
	pipeline "github.com/denismitr/auditbase/pipeline"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPayload is a mock of Payload interface
type MockPayload struct {
	ctrl     *gomock.Controller
	recorder *MockPayloadMockRecorder
}

// MockPayloadMockRecorder is the mock recorder for MockPayload
type MockPayloadMockRecorder struct {
	mock *MockPayload
}

// NewMockPayload creates a new mock instance
func NewMockPayload(ctrl *gomock.Controller) *MockPayload {
	mock := &MockPayload{ctrl: ctrl}
	mock.recorder = &MockPayloadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPayload) EXPECT() *MockPayloadMockRecorder {
	return m.recorder
}

// Event mocks base method
func (m *MockPayload) Event() *model.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Event")
	ret0, _ := ret[0].(*model.Event)
	return ret0
}

// Event indicates an expected call of Event
func (mr *MockPayloadMockRecorder) Event() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MockPayload)(nil).Event))
}

// MarkAsProcessed mocks base method
func (m *MockPayload) MarkAsProcessed() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkAsProcessed")
}

// MarkAsProcessed indicates an expected call of MarkAsProcessed
func (mr *MockPayloadMockRecorder) MarkAsProcessed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsProcessed", reflect.TypeOf((*MockPayload)(nil).MarkAsProcessed))
}

// Update mocks base method
func (m *MockPayload) Update(arg0 pipeline.Updater) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0)
}

// Update indicates an expected call of Update
func (mr *MockPayloadMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPayload)(nil).Update), arg0)
}
