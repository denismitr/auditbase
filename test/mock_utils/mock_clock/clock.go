// Code generated by MockGen. DO NOT EDIT.
// Source: utils/clock/clock.go

// Package mock_clock is a generated GoMock package.
package mock_clock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockClock is a mock of Clock interface
type MockClock struct {
	ctrl     *gomock.Controller
	recorder *MockClockMockRecorder
}

// MockClockMockRecorder is the mock recorder for MockClock
type MockClockMockRecorder struct {
	mock *MockClock
}

// NewMockClock creates a new mock instance
func NewMockClock(ctrl *gomock.Controller) *MockClock {
	mock := &MockClock{ctrl: ctrl}
	mock.recorder = &MockClockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClock) EXPECT() *MockClockMockRecorder {
	return m.recorder
}

// CurrentTimestamp mocks base method
func (m *MockClock) CurrentTimestamp() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentTimestamp")
	ret0, _ := ret[0].(int64)
	return ret0
}

// CurrentTimestamp indicates an expected call of CurrentTimestamp
func (mr *MockClockMockRecorder) CurrentTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentTimestamp", reflect.TypeOf((*MockClock)(nil).CurrentTimestamp))
}

// CurrentTime mocks base method
func (m *MockClock) CurrentTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// CurrentTime indicates an expected call of CurrentTime
func (mr *MockClockMockRecorder) CurrentTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentTime", reflect.TypeOf((*MockClock)(nil).CurrentTime))
}
