// Code generated by MockGen. DO NOT EDIT.
// Source: queue/queue.go

// Package mock_queue is a generated GoMock package.
package mock_queue

import (
	context "context"
	queue "github.com/denismitr/auditbase/queue"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockScaffolder is a mock of Scaffolder interface
type MockScaffolder struct {
	ctrl     *gomock.Controller
	recorder *MockScaffolderMockRecorder
}

// MockScaffolderMockRecorder is the mock recorder for MockScaffolder
type MockScaffolderMockRecorder struct {
	mock *MockScaffolder
}

// NewMockScaffolder creates a new mock instance
func NewMockScaffolder(ctrl *gomock.Controller) *MockScaffolder {
	mock := &MockScaffolder{ctrl: ctrl}
	mock.recorder = &MockScaffolderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScaffolder) EXPECT() *MockScaffolderMockRecorder {
	return m.recorder
}

// DeclareExchange mocks base method
func (m *MockScaffolder) DeclareExchange(name, kind string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclareExchange", name, kind)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclareExchange indicates an expected call of DeclareExchange
func (mr *MockScaffolderMockRecorder) DeclareExchange(name, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclareExchange", reflect.TypeOf((*MockScaffolder)(nil).DeclareExchange), name, kind)
}

// DeclareQueue mocks base method
func (m *MockScaffolder) DeclareQueue(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclareQueue", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclareQueue indicates an expected call of DeclareQueue
func (mr *MockScaffolderMockRecorder) DeclareQueue(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclareQueue", reflect.TypeOf((*MockScaffolder)(nil).DeclareQueue), name)
}

// Bind mocks base method
func (m *MockScaffolder) Bind(queue, exchange, routingKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", queue, exchange, routingKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind
func (mr *MockScaffolderMockRecorder) Bind(queue, exchange, routingKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockScaffolder)(nil).Bind), queue, exchange, routingKey)
}

// MockMQ is a mock of MQ interface
type MockMQ struct {
	ctrl     *gomock.Controller
	recorder *MockMQMockRecorder
}

// MockMQMockRecorder is the mock recorder for MockMQ
type MockMQMockRecorder struct {
	mock *MockMQ
}

// NewMockMQ creates a new mock instance
func NewMockMQ(ctrl *gomock.Controller) *MockMQ {
	mock := &MockMQ{ctrl: ctrl}
	mock.recorder = &MockMQMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMQ) EXPECT() *MockMQMockRecorder {
	return m.recorder
}

// DeclareExchange mocks base method
func (m *MockMQ) DeclareExchange(name, kind string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclareExchange", name, kind)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclareExchange indicates an expected call of DeclareExchange
func (mr *MockMQMockRecorder) DeclareExchange(name, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclareExchange", reflect.TypeOf((*MockMQ)(nil).DeclareExchange), name, kind)
}

// DeclareQueue mocks base method
func (m *MockMQ) DeclareQueue(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclareQueue", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclareQueue indicates an expected call of DeclareQueue
func (mr *MockMQMockRecorder) DeclareQueue(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclareQueue", reflect.TypeOf((*MockMQ)(nil).DeclareQueue), name)
}

// Bind mocks base method
func (m *MockMQ) Bind(queue, exchange, routingKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", queue, exchange, routingKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind
func (mr *MockMQMockRecorder) Bind(queue, exchange, routingKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockMQ)(nil).Bind), queue, exchange, routingKey)
}

// Inspect mocks base method
func (m *MockMQ) Inspect(queueName string) (queue.Inspection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inspect", queueName)
	ret0, _ := ret[0].(queue.Inspection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect
func (mr *MockMQMockRecorder) Inspect(queueName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockMQ)(nil).Inspect), queueName)
}

// Publish mocks base method
func (m *MockMQ) Publish(msg queue.Message, exchange, routingKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", msg, exchange, routingKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockMQMockRecorder) Publish(msg, exchange, routingKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockMQ)(nil).Publish), msg, exchange, routingKey)
}

// Reject mocks base method
func (m *MockMQ) Reject(tag uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reject", tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reject indicates an expected call of Reject
func (mr *MockMQMockRecorder) Reject(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reject", reflect.TypeOf((*MockMQ)(nil).Reject), tag)
}

// Ack mocks base method
func (m *MockMQ) Ack(tag uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack", tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack
func (mr *MockMQMockRecorder) Ack(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockMQ)(nil).Ack), tag)
}

// Subscribe mocks base method
func (m *MockMQ) Subscribe(queue, consumer string, receiveCh chan<- queue.ReceivedMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", queue, consumer, receiveCh)
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockMQMockRecorder) Subscribe(queue, consumer, receiveCh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockMQ)(nil).Subscribe), queue, consumer, receiveCh)
}

// Connect mocks base method
func (m *MockMQ) Connect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockMQMockRecorder) Connect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockMQ)(nil).Connect), ctx)
}

// Maintain mocks base method
func (m *MockMQ) Maintain() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Maintain")
}

// Maintain indicates an expected call of Maintain
func (mr *MockMQMockRecorder) Maintain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Maintain", reflect.TypeOf((*MockMQ)(nil).Maintain))
}

// Status mocks base method
func (m *MockMQ) Status() queue.ConnectionStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(queue.ConnectionStatus)
	return ret0
}

// Status indicates an expected call of Status
func (mr *MockMQMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockMQ)(nil).Status))
}

// NotifyStatusChange mocks base method
func (m *MockMQ) NotifyStatusChange(listener chan queue.ConnectionStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyStatusChange", listener)
}

// NotifyStatusChange indicates an expected call of NotifyStatusChange
func (mr *MockMQMockRecorder) NotifyStatusChange(listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyStatusChange", reflect.TypeOf((*MockMQ)(nil).NotifyStatusChange), listener)
}

// Stop mocks base method
func (m *MockMQ) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockMQMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockMQ)(nil).Stop))
}
